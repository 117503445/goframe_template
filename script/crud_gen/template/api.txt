package api

import (
	"github.com/gogf/gf/frame/g"
	"github.com/gogf/gf/net/ghttp"
	"github.com/gogf/gf/util/gconv"
	"goframe_template/app/dao"
	"goframe_template/app/model"
	"goframe_template/library/response"
)

var ${大写} = new(${小写}sApi)

type ${小写}sApi struct{}

// @Summary 获取所有${中文}
// @Tags ${中文}
// @Accept  json
// @Produce  json
// @Success 200 {array} model.${大写}ApiResponse
// @Router /api/${小写} [get]
func (*${小写}sApi) ReadAll(r *ghttp.Request) {
	var ${小写}s []model.${大写}
	if err := dao.${大写}.Structs(&${小写}s); err != nil {
		response.Json(r, response.Error, "", nil)
	}
	if len(${小写}s) == 0 {
		r.Response.Write("[]") //todo
		r.Exit()
	} else {
		var ${小写}sRsp []model.${大写}ApiResponse
		if err := gconv.Structs(${小写}s, &${小写}sRsp); err != nil {
			g.Log().Line().Error(err)
		}
		response.Json(r, response.Success, "", ${小写}sRsp)
	}
}

// @Summary 获取一个${中文}
// @Tags ${中文}
// @Accept  json
// @Produce  json
// @Param   id      path int true  "${中文}id" default(1)
// @Success 200 {object} model.${大写}ApiResponse
// @Router /api/${小写}/{id} [get]
func (*${小写}sApi) ReadOne(r *ghttp.Request) {
	id := r.GetRouterVar("id").Uint64()
	var ${小写} model.${大写}
	if err := dao.${大写}.Where("id = ", id).Struct(&${小写}); err != nil {
		response.Json(r, response.ErrorNotExist, "", nil)
	}
	var ${小写}Rsp model.${大写}ApiResponse
	if err := gconv.Struct(${小写}, &${小写}Rsp); err != nil {
		g.Log().Line().Error(err)
	}
	response.Json(r, response.Success, "", ${小写}Rsp)
}

// @Summary 添加一个${中文}
// @Tags ${中文}
// @Accept  json
// @Produce  json
// @Param   ${小写}s      body model.${大写}ApiRequest true  "${中文}"
// @Success 200 {object} model.${大写}ApiResponse
// @Router /api/${小写} [POST]
// @Security JWT
func (*${小写}sApi) Create(r *ghttp.Request) {
	var (
		apiReq *model.${大写}ApiRequest
		${小写}   *model.${大写}
	)
	if err := r.Parse(&apiReq); err != nil {
		response.Json(r, response.ErrorCreateFail, "", nil)
	}
	if err := gconv.Struct(apiReq, &${小写}); err != nil {
		response.Json(r, response.ErrorCreateFail, "", nil)
	}
	if result, err := dao.${大写}.Insert(${小写}); err != nil {
		response.Json(r, response.ErrorCreateFail, "", nil)
	} else {
		id, _ := result.LastInsertId()
		${小写}.Id = gconv.Uint64(id)

		var ${小写}Rsp model.${大写}ApiResponse
		if err := gconv.Struct(${小写}, &${小写}Rsp); err != nil {
			g.Log().Line().Error(err)
		}
		response.Json(r, response.Success, "", ${小写}Rsp)
	}
}

// @Summary 删除一个${中文}
// @Tags ${中文}
// @Accept  json
// @Produce  json
// @Param   id      path int true  "${中文}id" default(1)
// @Success 200 {string} string "{"message": "delete success"}"
// @Router /api/${小写}/{id} [DELETE]
// @Security JWT
func (*${小写}sApi) Delete(r *ghttp.Request) {
	id := r.GetRouterVar("id").Uint64()

	if count, err := dao.${大写}.Where("id = ", id).Count(); err != nil {
		response.Json(r, response.Fail, "", nil)
	} else if count == 0 {
		response.Json(r, response.ErrorNotExist, "", nil)
	}

	if _, err := dao.${大写}.Where("id", id).Delete(); err != nil {
		response.Json(r, response.Error, "", nil)
	}
	response.Json(r, response.Success, "", nil)
}

// @Summary 更改一个${中文}
// @Tags ${中文}
// @Accept  json
// @Produce  json
// @Param   id      path int true  "${中文}id" default(1)
// @Param   ${小写}s      body model.${大写}ApiRequest true  "${中文}"
// @Success 200 {object} model.${大写}ApiResponse
// @Router /api/${小写}/{id} [PUT]
// @Security JWT
func (*${小写}sApi) Update(r *ghttp.Request) {
	id := r.GetRouterVar("id").Uint64()

	bodyMap := gconv.Map(r.GetBodyString())

	if _, ok := bodyMap["id"]; ok {
		response.Json(r, response.Fail, "shouldn't pass id in POST method", nil)
	}

	if _, err := dao.${大写}.Data(bodyMap).Where("id", id).Update(); err != nil {
		response.Json(r, response.ErrorUpdateFail, "", err)
	} else {
		var ${小写}s model.${大写}
		if err := dao.${大写}.Where("id = ", id).Struct(&${小写}s); err != nil {
			response.Json(r, response.ErrorNotExist, "", nil)
		}
		var ${小写}Rsp model.${大写}ApiResponse
		if err := gconv.Struct(${小写}s, &${小写}Rsp); err != nil {
			g.Log().Line().Error(err)
		}
		response.Json(r, response.Success, "", ${小写}Rsp)
	}
}
